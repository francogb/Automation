/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Report;

import java.io.FileOutputStream;
import java.util.Calendar;
import java.util.Date;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import Context.PreObjects;
import Helpers.XMLHelper;
import static Helpers.XMLHelper.preObjects;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;

/**
 *
 * @author matia
 */
public class Report {

    private static String FILE = "C://Report/MyReport.pdf";
    private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
            Font.BOLD);
    private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.NORMAL, BaseColor.RED);
    private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
            Font.BOLD);
    private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.BOLD);

    public static String getTime() {
        Calendar calendar = Calendar.getInstance();
        String hours = String.valueOf(calendar.get(Calendar.HOUR_OF_DAY));
        String minutes = String.valueOf(calendar.get(Calendar.MINUTE));
        String seconds = String.valueOf(calendar.get(Calendar.SECOND));

        return hours + minutes + seconds;
    }

    public static void generatePdfReport() {
        try {
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(FILE));
            document.open();
            addMetaData(document);
            addTitlePage(document);
            addTestContent(document);
            document.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void addMetaData(Document document) {
        document.addTitle(ReportConfiguration.titleAddAutor);
        document.addSubject(ReportConfiguration.titleAddSubject);
        document.addKeywords(ReportConfiguration.titleAddKeyWords);
        document.addAuthor(ReportConfiguration.titleAddAutor);
        document.addCreator(ReportConfiguration.titleAddCreator);
    }

    private static void addTitlePage(Document document) throws DocumentException {
        Paragraph preface = new Paragraph();
        float width = document.getPageSize().getWidth();
        float height = document.getPageSize().getHeight();
        Rectangle rect = new Rectangle(width - 15, height - 10);
        rect.setLeft(15);
        rect.setBottom(15);
        rect.setBorder(Rectangle.BOX);
        rect.setBorderColor(BaseColor.BLACK);
        rect.setBorderWidth(2);
        document.add(rect);
        // We add one empty line
        addEmptyLine(preface, 1);
        // Lets write a big header
        preface.add(new Paragraph(ReportConfiguration.titleTitle, catFont));
        addEmptyLine(preface, 1);
        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph(
                ReportConfiguration.titleReportBy + ReportConfiguration.titleAddAutor + ", " + new Date(), smallBold));
        addEmptyLine(preface, 1);
        preface.add(new Paragraph(ReportConfiguration.titleIntroDetails));
        addEmptyLine(preface, 1);
        preface.add(new Paragraph(ReportConfiguration.titleSecondTitle, subFont));
        addEmptyLine(preface, 1);
        preface.add(new Paragraph(ReportConfiguration.titleSecondDetails));
        addEmptyLine(preface, 1);
        preface.add(new Paragraph(ReportConfiguration.titleThirdTitle, subFont));
        preface.add(new Paragraph(ReportConfiguration.titleThirdDetails));
        document.add(preface);
        // Start a new page
        document.newPage();
    }

    public static void addTestContent(Document document) throws DocumentException {
        for (int i = 0; i < XMLHelper.preObjects.size(); i++) {
            float width = document.getPageSize().getWidth();
            float height = document.getPageSize().getHeight();
            Rectangle rect = new Rectangle(width - 15, height - 10);
            rect.setLeft(15);
            rect.setBottom(15);
            rect.setBorder(Rectangle.BOX);
            rect.setBorderColor(BaseColor.BLACK);
            rect.setBorderWidth(2);
            document.add(rect);
            Paragraph preface = new Paragraph();
            Paragraph first = new Paragraph(ReportConfiguration.testContentTitle, smallBold);
            first.setAlignment(Element.ALIGN_CENTER);
            document.add(first);
            preface.add(new Paragraph("", smallBold));
            preface.add(new Paragraph(preObjects.get(i).obj.getNombreDeLaPrueba(), catFont));// Will create: Report generated by: _name, _date
            preface.add(new Paragraph(
                    ReportConfiguration.testContentExecuteBy + ReportConfiguration.titleAddCreator + ", " + new Date(), smallBold));
            addEmptyLine(preface, 1);
            preface.add(new Paragraph(ReportConfiguration.testContentTestDescription, smallBold));
            preface.add(new Paragraph(preObjects.get(i).obj.getNombreDeLaPrueba()));
            addEmptyLine(preface, 1);
            preface.add(new Paragraph(ReportConfiguration.testContentObjetiveDescription, smallBold));
            preface.add(new Paragraph(preObjects.get(i).obj.getTipoDePrueba()));
            addEmptyLine(preface, 1);
            preface.add(new Paragraph("Duracion: ", smallBold));
            preface.add(new Paragraph(preObjects.get(i).obj.getTiempoFinal()) + " Seg");
            addEmptyLine(preface, 2);
            PdfPTable table = new PdfPTable(2);
            PdfPCell c1 = new PdfPCell(new Phrase("Nombre del paso"));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(c1);
            c1 = new PdfPCell(new Phrase("Estado"));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(c1);
            table.setHeaderRows(1);
            document.add(preface);
            document.add(buildTable(table, preObjects.get(i).obj.getNombreDeLaPrueba(), preObjects.get(i)));
        }

    }

    public static PdfPTable buildTable(PdfPTable table, String ide, PreObjects pre) {
        HashMap<String, String> hash = pre.obj.getPasos();
        Map<String, String> treeMap = new TreeMap<String, String>(hash);
        for (String key : treeMap.keySet()) {
            table.addCell(key);
            table.addCell(pre.obj.getPasos().get(key));
        }

        return table;
    }

    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }

}
